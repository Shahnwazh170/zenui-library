import { useState } from 'react';
import { RiShiningFill } from "react-icons/ri";
import { generateTailwindConfig } from "../APIs/genaiAPI";
import AIResponseSidebar from './AIResponseSidebar';

const Generator = () => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState('');
  const [inputError, setInputError] = useState('');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [codes, setCodes] = useState('');

  const handleGenerateConfig = async () => {
    if (!prompt.trim()) {
      setInputError('Please enter a theme name for project.');
      return;
    }

    try {
      setInputError('');
      setError('');
      setIsGenerating(true);
      setSidebarOpen(true);

      const generatedConfig = await generateTailwindConfig(prompt);
      
      const currentDate = new Date().toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });

      // Add header comment and clean markdown
      const formattedCode = `
      /**
       * Generated by @ZenUI Library
       * Date: ${currentDate}
       */

      ${generatedConfig.replace(/```javascript/g, '').replace(/```/g, '').trim()}
      `;
      
      setCodes(formattedCode);
      setPrompt('');

    } catch (err) {
      setError('Failed to generate config. Please try again.');
      setSidebarOpen(false);
      setCodes('');
    } finally {
      setIsGenerating(false);
    }
  };

return (
  <div className='w-full'>
    <div>
      <label
        htmlFor='manual-input'
        className='text-[1rem] font-semibold text-gray-700 '
      >
        Write the prompt for theme name.
      </label>{" "}
      <br />
      <input
        id='manual-input'
        type='text'
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        placeholder='Enter theme name like E-Commerce, Blog...'
        className='py-2 px-4 w-full rounded-md border border-gray-300 mt-1.5 outline-none focus:ring-0 focus:border-[#0FABCA] text-gray-800'
      />
      {inputError && (
        <div className='text-red-500 text-sm mt-1'>{inputError}</div>
      )}
    </div>

    <div className='flex items-center gap-[15px] mt-7'>
      <button
        onClick={handleGenerateConfig}
        className='flex items-center gap-[8px] code_generate_btn bg-gradient-to-r from-[#0FABCA] hover:from-[#0FABCA]/80 to-[#CD00F1] hover:to-[#CD00F1]/80 text-white py-2.5 px-6 rounded-md'
        disabled={isGenerating}
      >
        <RiShiningFill className={isGenerating ? "animate-spin-zoom" : ""} />{" "}
        {isGenerating ? "Generating..." : "Generate Code"}
      </button>
    </div>
    {error && <div className='text-red-500 mt-2'>{error}</div>}

    <AIResponseSidebar
      sidebarOpen={sidebarOpen}
      setSidebarOpen={setSidebarOpen}
      codes={codes}
      isGenerating={isGenerating}
    />
  </div>
);
};

export default Generator;